version: '3.9'
services:
  db:
    image: postgres:15
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    expose:
      - "5432"
    healthcheck:
      test: "psql -U postgres -c 'select 1'"
      interval: 0.5s
      timeout: 30s
      retries: 10

  migrate:
    build:
      context: ..
      dockerfile: docker/back.dockerfile
    environment:
      DB_URL: "postgresql+asyncpg://postgres@db:5432/postgres"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ../back:/back:ro
    entrypoint: [python, db/base.py]

  back:
    build:
      context: ..
      dockerfile: docker/back.dockerfile
    environment:
      DB_URL: "postgresql+asyncpg://postgres@db:5432/postgres"
    depends_on:
      db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    volumes:
      - ../back:/back:ro
    ports:
      - "8000:8000"
    expose:
      - "8000"
    healthcheck:
      test: "python3 -c \"import httpx; exit(httpx.get('http://localhost:8000/schema/swagger').status_code != 200)\""
      interval: 0.5s
      timeout: 5s
      retries: 10

  front:
    container_name: "front"
    build:
      context: ../front
      dockerfile: ../docker/front.dockerfile
    depends_on:
      - back
    ports:
    - "3000:3000"
    volumes:
      - ../front/src:/app/src:ro
    command:
      - npm
      - run
      - dev


volumes:
  pgdata:
